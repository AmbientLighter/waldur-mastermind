#!/bin/sh
#
# Requires: curl

[ -n "$WALDUR_MASTERMIND_URL" ] || WALDUR_MASTERMIND_URL="http://localhost/"


tests_passed=true

for i in waldur-celery waldur-celerybeat waldur-uwsgi; do
    echo "[+] Checking if $i service is enabled..."
    if systemctl is-enabled "$i" > /dev/null; then
        echo "[+] Checking if $i service is running..."
        if systemctl is-active "$i" > /dev/null; then
            echo "OK: service is enabled and running"
        else
            echo "FAILED: service is not running"
            systemctl status "$i"
            tests_passed=false
        fi
    else
        echo "INFO: Service $i is not enabled to run on system boot -- status check skipped."
    fi
done

for i in '/' '/admin/' '/docs/'; do
    if [ "$i" = "/api/" ]; then
        expected_response_code=401
    else
        expected_response_code=200
    fi
    url="$WALDUR_MASTERMIND_URL$i"
    echo "[+] Checking HTTP response code for $url..."
    response_code=$(curl -L -o'/dev/null' -s -w'%{http_code}' "$url")
    if [ "$response_code" = "$expected_response_code" ]; then
        echo "OK: $response_code"
    else
        echo "FAILED: $expected_response_code expected but got $response_code"
        echo "Try this command for debugging:"
        echo "  curl -L -o'/dev/null' -v '$url'"
        tests_passed=false
    fi
done

expected_response_code=401
url="$WALDUR_MASTERMIND_URL/api-auth/password/"
data="username=x&password=x"
echo "[+] Checking HTTP response code for $url (POST $data)..."
response_code=$(curl -d"$data" -L -o'/dev/null' -s -XPOST -w'%{http_code}' "$url")
if [ "$response_code" = "$expected_response_code" ]; then
    echo "OK: $response_code"
else
    echo "FAILED: $expected_response_code expected but got $response_code"
    echo "Try this command for debugging:"
    echo "  curl -d'$data' -L -o'/dev/null' -XPOST -v '$url'"
    tests_passed=false
fi

echo "----------------"
if [ "$tests_passed" = true ]; then
    echo "All tests passed."
else
    echo "Some tests failed."
    exit 1
fi
